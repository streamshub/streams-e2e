<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.streams</groupId>
    <artifactId>streams-e2e</artifactId>
    <version>1.0-SNAPSHOT</version>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/skodjob/streams-e2e/issues</url>
    </issueManagement>

    <properties>
        <maven.compiler.release>17</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <test-frame.version>0.9.0</test-frame.version>
        <skodjob-doc.version>0.3.0</skodjob-doc.version>
        <fabric8.version>7.0.1</fabric8.version>
        <log4j.version>2.24.3</log4j.version>
        <slf4j.version>2.0.16</slf4j.version>
        <jackson.version>2.17.2</jackson.version>

        <junit.jupiter.version>5.11.4</junit.jupiter.version>
        <junit.platform.version>1.11.4</junit.platform.version>
        <maven.surefire.version>3.5.2</maven.surefire.version>

        <!--   Build tools' properties     -->
        <spotbugs.version>4.8.6</spotbugs.version>
        <maven.spotbugs.version>4.8.6.6</maven.spotbugs.version>
        <maven.checkstyle.version>3.6.0</maven.checkstyle.version>
        <maven.compile.plugin.version>3.13.0</maven.compile.plugin.version>
        <maven.dependency.version>3.8.1</maven.dependency.version>
        <maven.download.plugin.version>1.13.0</maven.download.plugin.version>
        <maven.exec.plugin.version>3.5.0</maven.exec.plugin.version>

        <skipITs>true</skipITs>

        <operator.files.destination>operator-install-files</operator.files.destination>
        <flink.files.destination>flink</flink.files.destination>
        <strimzi.files.destination>strimzi-kafka-operator</strimzi.files.destination>
        <cert.manager.files.destination>cert-manager</cert.manager.files.destination>
        <apicurio.registry.files.destination>apicurio-registry</apicurio.registry.files.destination>
        <debezium.operator.files.destination>debezium</debezium.operator.files.destination>
        <!-- Operators versions -->
        <strimzi.version>0.45.0</strimzi.version>
        <flink.version>1.10.0</flink.version>
        <cert.manager.version>1.15.2</cert.manager.version>
        <apicurio.registry.version>1.1.3-v2.6.4.final</apicurio.registry.version>
        <apicurio.api.version>1.1.2</apicurio.api.version>
        <apicurio.lib.version>2.6.6.Final</apicurio.lib.version>
        <debezium.operator.version>2.7.0</debezium.operator.version>
        <kafka.version>3.8.0</kafka.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${project.groupId}</groupId>
                <artifactId>common</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>io.fabric8</groupId>
                <artifactId>kubernetes-client-bom-with-deps</artifactId>
                <version>${fabric8.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-common</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-kubernetes</artifactId>
            <version>${test-frame.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-openshift</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-log-collector</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-docs-generator-maven-plugin</artifactId>
            <version>${skodjob-doc.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.skodjob</groupId>
            <artifactId>test-frame-metrics-collector</artifactId>
            <version>${test-frame.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-common</artifactId>
            <version>${fabric8.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>generator-annotations</artifactId>
            <version>${fabric8.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-core</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-client-api</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-apps</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-rbac</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-model-operatorhub</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>openshift-client-api</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>kubernetes-model-batch</artifactId>
            <version>${fabric8.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.jupiter.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit.jupiter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.jupiter.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-commons</artifactId>
            <version>${junit.platform.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>${junit.platform.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-engine</artifactId>
            <version>${junit.platform.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven.surefire.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j2-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <dependency>
            <groupId>io.sundr</groupId>
            <artifactId>builder-annotations</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
            <version>${spotbugs.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>io.strimzi</groupId>
            <artifactId>api</artifactId>
            <version>${strimzi.version}</version>
        </dependency>

        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-operator-api-model</artifactId>
            <version>${apicurio.api.version}</version>
        </dependency>

        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-serdes-avro-serde</artifactId>
            <version>${apicurio.lib.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-common</artifactId>
            <version>${apicurio.lib.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-serde-common</artifactId>
            <version>${apicurio.lib.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>${kafka.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compile.plugin.version}</version>
                <configuration>
                    <compilerArgs>
                        <arg>-proc:full</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven.surefire.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>verify</goal>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipITs>${skipITs}</skipITs>
                    <forkCount>1</forkCount>
                    <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
                    <includes>
                        <include>**/IT*.java</include>
                        <include>**/*IT.java</include>
                        <include>**/ST*.java</include>
                        <include>**/*ST.java</include>
                    </includes>
                    <properties>
                        <configurationParameters>
                            junit.jupiter.extensions.autodetection.enabled = true
                        </configurationParameters>
                    </properties>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven.dependency.version}</version>
                <executions>
                    <execution>
                        <id>analyze</id>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>true</failOnWarning>
                            <ignoredUnusedDeclaredDependencies>
                                <!-- Needed for logging in tests used by test-frame (uses SLF4J) -->
                                <ignoredUnusedDeclaredDependency>org.apache.logging.log4j:log4j-slf4j2-impl</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:kubernetes-server-mock</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:generator-annotations</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.sundr:builder-annotations</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.projectlombok:lombok</ignoredUnusedDeclaredDependency>
                                <!-- Temporary exclusion as it will be needed when we start write something -->
                                <ignoredUnusedDeclaredDependency>io.skodjob:test-frame-metrics-collector</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:openshift-client</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>io.fabric8:kubernetes-model</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.junit.jupiter:junit-jupiter-engine</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.junit.jupiter:junit-jupiter-params</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.junit.platform:junit-platform-commons</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.junit.platform:junit-platform-engine</ignoredUnusedDeclaredDependency>
                                <ignoredUnusedDeclaredDependency>org.apache.maven.plugins:maven-failsafe-plugin</ignoredUnusedDeclaredDependency>
                            </ignoredUnusedDeclaredDependencies>
                        </configuration>
                    </execution>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven.checkstyle.version}</version>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <configuration>
                            <consoleOutput>true</consoleOutput>
                            <failsOnError>true</failsOnError>
                            <includeTestSourceDirectory>true</includeTestSourceDirectory>
                            <configLocation>.checkstyle/checkstyle.xml</configLocation>
                            <suppressionsLocation>.checkstyle/suppressions.xml</suppressionsLocation>
                        </configuration>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${maven.spotbugs.version}</version>
                <dependencies>
                    <!-- overwrite dependency on spotbugs if you want to specify the version of˓→spotbugs -->
                    <dependency>
                        <groupId>com.github.spotbugs</groupId>
                        <artifactId>spotbugs</artifactId>
                        <version>${spotbugs.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <effort>Max</effort>
                    <!-- Reports all bugs (other values are medium and max) -->
                    <threshold>Low</threshold>
                    <!-- Produces XML report -->
                    <xmlOutput>true</xmlOutput>
                    <!-- Configures the directory in which the XML report is created -->
                    <spotbugsXmlOutputDirectory>${project.build.directory}/spotbugs</spotbugsXmlOutputDirectory>
                    <!-- Configures the file for excluding warnings -->
                    <excludeFilterFile>${project.basedir}/.spotbugs/spotbugs-exclude.xml</excludeFilterFile>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>java-generator-maven-plugin</artifactId>
                <version>${fabric8.version}</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <urls>
                        https://raw.githubusercontent.com/apache/flink-kubernetes-operator/release-${flink.version}/helm/flink-kubernetes-operator/crds/flinkdeployments.flink.apache.org-v1.yml,
                        https://raw.githubusercontent.com/apache/flink-kubernetes-operator/release-${flink.version}/helm/flink-kubernetes-operator/crds/flinksessionjobs.flink.apache.org-v1.yml
                    </urls>
                    <enumUppercase>false</enumUppercase>
                    <extraAnnotations>true</extraAnnotations>
                    <alwaysPreserveUnknown>true</alwaysPreserveUnknown>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.skodjob</groupId>
                <artifactId>test-docs-generator-maven-plugin</artifactId>
                <version>${skodjob-doc.version}</version>
                <executions>
                    <execution>
                        <phase>install</phase>
                        <goals>
                            <goal>test-docs-generator</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <testsPath>${project.basedir}/src/test/java/io/streams/e2e/</testsPath>
                    <docsPath>${project.basedir}/docs/</docsPath>
                    <generateFmf>false</generateFmf>
                    <generateDirs>true</generateDirs>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>test</id>
            <properties>
                <skipITs>false</skipITs>
            </properties>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>get-operator-files</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.googlecode.maven-download-plugin</groupId>
                        <artifactId>download-maven-plugin</artifactId>
                        <version>${maven.download.plugin.version}</version>
                        <executions>
                            <!-- Strimzi Operator -->
                            <execution>
                                <id>get-strimzi</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>
                                        https://github.com/strimzi/strimzi-kafka-operator/releases/download/${strimzi.version}/strimzi-${strimzi.version}.tar.gz
                                    </url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/</outputDirectory>
                                    <outputFileName>strimzi.tar.gz</outputFileName>
                                    <unpack>true</unpack>
                                    <fileMappers>
                                        <org.codehaus.plexus.components.io.filemappers.RegExpFileMapper>
                                            <pattern>^strimzi-\d+.\d+.\d+</pattern>
                                            <replacement>${strimzi.files.destination}</replacement>
                                        </org.codehaus.plexus.components.io.filemappers.RegExpFileMapper>
                                    </fileMappers>
                                </configuration>
                            </execution>
                            <!-- Flink Operator -->
                            <execution>
                                <id>get-flink-deployment-crd</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/apache/flink-kubernetes-operator/release-${flink.version}/helm/flink-kubernetes-operator/crds/flinkdeployments.flink.apache.org-v1.yml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/${flink.files.destination}/</outputDirectory>
                                    <outputFileName>flinkdeployments.flink.apache.org-v1.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>get-flink-sessionjob-crd</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/apache/flink-kubernetes-operator/release-${flink.version}/helm/flink-kubernetes-operator/crds/flinksessionjobs.flink.apache.org-v1.yml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/${flink.files.destination}/</outputDirectory>
                                    <outputFileName>flinksessionjobs.flink.apache.org-v1.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <!-- Cert Manager -->
                            <execution>
                                <id>get-cert-manager</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://github.com/cert-manager/cert-manager/releases/download/v${cert.manager.version}/cert-manager.yaml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/${cert.manager.files.destination}/</outputDirectory>
                                    <outputFileName>cert-manager.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <!-- Apicurio Registry -->
                            <execution>
                                <id>get-apicurio-registry</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/Apicurio/apicurio-registry-operator/main/install/apicurio-registry-operator-${apicurio.registry.version}.yaml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/${apicurio.registry.files.destination}/</outputDirectory>
                                    <outputFileName>apicurio-registry.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <!-- Debezium Operator -->
                            <execution>
                                <id>get-debezium-operator-crds</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/debezium/debezium-operator/v${debezium.operator.version}.Final/k8/debeziumservers.debezium.io-v1.yml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/${debezium.operator.files.destination}/</outputDirectory>
                                    <outputFileName>debeziumservers.debezium.io-v1.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <!-- Flink SQL Example https://github.com/streamshub/flink-sql-examples -->
                            <execution>
                                <id>get-flink-sql-example-data-app</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/streamshub/flink-sql-examples/main/recommendation-app/data-generator.yaml</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/examples/sql-example</outputDirectory>
                                    <outputFileName>data-generator.yaml</outputFileName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>get-flink-sql-example-data-app-cm</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>wget</goal>
                                </goals>
                                <configuration>
                                    <url>https://raw.githubusercontent.com/streamshub/flink-sql-examples/main/recommendation-app/productInventory.csv</url>
                                    <outputDirectory>${basedir}/${operator.files.destination}/examples/sql-example</outputDirectory>
                                    <outputFileName>productInventory.csv</outputFileName>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <overwrite>true</overwrite>
                            <failOnError>true</failOnError>
                            <skipCache>true</skipCache>
                            <retries>2</retries>
                        </configuration>
                    </plugin>
                    <!-- Flink Operator Deployment -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>${maven.exec.plugin.version}</version>
                        <executions>
                            <execution>
                                <id>create-dir</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>sh</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>mkdir -p ${basedir}/${operator.files.destination}/${flink.files.destination}</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>flink-repo-add</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>sh</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>helm repo add --force-update flink-operator-repo https://downloads.apache.org/flink/flink-kubernetes-operator-${flink.version}/</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>flink-deployment-generate</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>sh</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>helm template flink-kubernetes-operator flink-operator-repo/flink-kubernetes-operator --set watchNamespaces=""  --set podSecurityContext=null --namespace flink-kubernetes-operator > ${basedir}/${operator.files.destination}/flink/deploy.yaml</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>debezium-repo-add</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>sh</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>helm repo add --force-update debezium https://charts.debezium.io/</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>debezium-deployment-generate</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>sh</executable>
                                    <arguments>
                                        <argument>-c</argument>
                                        <argument>helm template debezium-operator debezium/debezium-operator --version ${debezium.operator.version}-final > ${basedir}/${operator.files.destination}/${debezium.operator.files.destination}/deploy.yaml</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
